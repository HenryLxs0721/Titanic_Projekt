library(readr)
train <- read_csv("train.csv")
View(train)
######
#read file
train_df = read.csv(file='train.csv')
test_df = read.csv(file='test.csv')
gender_sub_df= read.csv(file='gender_submission.csv')
View(train)
rm(train)
#define new Variable Title
#spilt Title
train_df$Title<-str_split_fixed(str_split_fixed(train_df$Name, ", ", 2)[,2], " ", 2)[,1]
library(tidyverse)
library(tidyr)
library(tibble)
library(dplyr)
library(stringr)
library(glmnet)
library(rje)
#define new Variable Title
#spilt Title
train_df$Title<-str_split_fixed(str_split_fixed(train_df$Name, ", ", 2)[,2], " ", 2)[,1]
test_df$Title<-str_split_fixed(str_split_fixed(test_df$Name, ", ", 2)[,2], " ", 2)[,1]
#check names of Titles
summary(as.factor(train_df$Title))
summary(as.factor(test_df$Title))
#check special value
#train_df %>% filter(Title=="Sir.") %>% view()   #check special value
#merge speceal case
#in traingsdata
train_df$Title[train_df$Title %in% c('Mlle.','Ms.')]<- 'Miss.' ##Mlle. is Miss. in French
train_df$Title[train_df$Title %in% c('Mme.','the',"Lady.")]<- 'Mrs.' ## Mme. is French
train_df$Title[train_df$Title %in% c('Don.','Jonkheer.','Sir.')]<- 'Mr.' ## Spain
train_df$Title[!train_df$Title %in% c('Master.', 'Miss.','Mr.', 'Mrs.','Rev.','Dr.','Capt.')]<- 'COL&Major'
#in testdata
test_df$Title[test_df$Title %in% c('Ms.',"Dona.")]<- 'Miss.'
test_df$Title[!test_df$Title %in% c('Master.', 'Miss.','Mr.', 'Mrs.','Rev.','Dr.','Capt.')]<- 'COL&Major'
#filling the blanks
##define the mode funktion
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#Embarked
train_df$Embarked[!train_df$Embarked %in% c('S','C','Q')]<- getmode(train_df$Embarked)  #filling the blanks with most frequent value
#Ages
#get Mode & Mean of Age in traing & Testing dataset
train_mode<- train_df$Age %>% na.omit() %>% table() %>% as.data.frame() %>% arrange(-Freq) %>% slice(1) %>% pull(1)
test_mode<- test_df$Age %>% na.omit() %>% table() %>% as.data.frame() %>% arrange(-Freq) %>% slice(1) %>% pull(1)
train_mean<-round(mean(train_df$Age,na.rm = TRUE),0)
test_mean<-round(mean(test_df$Age,na.rm = TRUE),0)
#replace na with seleceted way
train_df$Age[is.na(train_df$Age) & train_df$Title!="Master."]<-train_mode
train_df$Age[is.na(train_df$Age) & train_df$Title=="Master."]<-8
test_df$Age[is.na(test_df$Age) & test_df$Title!="Master."]<-test_mode
test_df$Age[is.na(test_df$Age) & test_df$Title=="Master."]<-8
#replace missing Fare
test_df$Fare<-replace_na(test_df$Fare,median(test_df$Fare,na.rm = TRUE))
######
#change datatype
train_df$Title<-as.factor(train_df$Title)   #change to factor variable
test_df$Title<-as.factor(test_df$Title)     #change to factor variable
train_df$Sex<-as.factor(train_df$Sex)  #change to factor variable
test_df$Sex<-as.factor(test_df$Sex)    #change to factor variable
train_df$Embarked<-as.factor(train_df$Embarked)   #change to factor variable
test_df$Embarked<-as.factor(test_df$Embarked)     #change to factor variable
train_df$Pclass<-as.factor(train_df$Pclass)   #change to factor variable
test_df$Pclass<-as.factor(test_df$Pclass)     #change to factor variable
######
#creat new variables
######
#visualization of Fare price distrubation
train_df$Fare[train_df$Fare] %>%
sort() %>%
barplot(.,main="Fare price distribution in Trainingsdata")
#summary of Fare price in Trainingsdata
summary(train_df$Fare)
#Percent of Fare prices over 100
#   there are 891 records in training data
length(train_df$Fare[train_df$Fare>100])/891
#Probability of survival of both categories
#over 100
mean(train_df$Survived[train_df$Fare>=100])
#under 100
mean(train_df$Survived[train_df$Fare<100])
#838 records with fare price under 100
length(train_df$Fare[train_df$Fare<100])
#about 80 Percent of Fare prices of prices under 100 are under 30
length(train_df$Fare[train_df$Fare<30])/838
#and half of them are under 10
summary(train_df$Fare[train_df$Fare<30])
#Probabilities of survival of categories
mean(train_df$Survived[train_df$Fare<10])
mean(train_df$Survived[train_df$Fare>=10 & train_df$Fare<30])
mean(train_df$Survived[train_df$Fare>=30 & train_df$Fare<100])
mean(train_df$Survived[train_df$Fare>=100])
barplot(sort(train_df$Fare[train_df$Fare<100]),main="Fare price under 100 in Trainingsdata")
#summary of Fare price under 100 in Trainingsdata
summary(train_df$Fare[train_df$Fare<100])
#visualization of ages distrubation
par(mfrow=c(1,1))
train_df$Age %>%
sort() %>%
barplot(.,main="Age Distribution in Trainingsdata")
#80% der Fahrpreis
sort(train_df$Fare)[round(0.8*length(train_df$Fare))]
######
#creat classed variables for Fare & Ages
#Fare_classed for trainingsdata
train_df$Fare_classed[train_df$Fare>100]<-">100"
train_df$Fare_classed[train_df$Fare>30 & train_df$Fare<=100]<-"30-100"
train_df$Fare_classed[train_df$Fare>10 & train_df$Fare<=30]<-"10-30"
train_df$Fare_classed[train_df$Fare<=10]<-"0-10"
train_df$Fare_classed<-as.factor(train_df$Fare_classed)
#Fare_classed for testdata
test_df$Fare_classed[test_df$Fare>100]<-">100"
test_df$Fare_classed[test_df$Fare>30 & test_df$Fare<=100]<-"30-100"
test_df$Fare_classed[test_df$Fare>10 & test_df$Fare<=30]<-"10-30"
test_df$Fare_classed[test_df$Fare<=10]<-"0-10"
test_df$Fare_classed<-as.factor(test_df$Fare_classed)
#Age_classed for trainingsdata methode
train_df$Age_classed[train_df$Age<=18]<-"U18"
train_df$Age_classed[train_df$Age>18 & train_df$Age<60]<-"19-59"
train_df$Age_classed[train_df$Age>=60]<-"O60"
train_df$Age_classed<-as.factor(train_df$Age_classed)
#Age_classed for testdata methode
test_df$Age_classed[test_df$Age<=18]<-"U18"
test_df$Age_classed[test_df$Age>18 & test_df$Age<60]<-"19-59"
test_df$Age_classed[test_df$Age>=60]<-"O60"
test_df$Age_classed<-as.factor(test_df$Age_classed)
######
#new variable FamMem(Family members) instead of Parch
train_df$FamMem<-train_df$SibSp+train_df$Parch
test_df$FamMem<-test_df$SibSp+test_df$Parch
######
#Ticket classify
train_df$Ticket0<-train_df$Ticket
train_df$Ticket[!is.na(as.integer(train_df$Ticket0))]<-"only nummbers"
train_df$Ticket[is.na(as.integer(train_df$Ticket0))]<-"with Char"
train_df$Ticket<-as.factor(train_df$Ticket)
test_df$Ticket0<-test_df$Ticket
test_df$Ticket[!is.na(as.integer(test_df$Ticket0))]<-"only nummbers"
test_df$Ticket[is.na(as.integer(test_df$Ticket0))]<-"with Char"
test_df$Ticket<-as.factor(test_df$Ticket)
######
######
#remove useless variables
train_df<-train_df[,!names(train_df) %in% c("PassengerId","Name","Cabin","Ticket0","Parch","ParchClassed")]
test_df<-test_df[,!names(test_df) %in% c("PassengerId","Name","Cabin","Ticket0","Parch","ParchClassed")]
######
#view(train_df)
summary(train_df)
#find the best model
#creat powerset
variables <- powerSet(c("Pclass", "Sex",  "Fare", "Fare_classed","Age", "Age_classed", "Embarked", "SibSp", "FamMem","Ticket", "Title"))
#test all combinations
v1<-c()
v2<-c()
v3<-c()
v4<-c()
len<-c()
for (i in 2:length(variables)){
model<-glm(paste("Survived~",paste(variables[[i]], collapse="+")), data=train_df, family = binomial(link = "logit"))
a1<-train_df$Survived==round(predict.glm(model,train_df,type = 'response'))
a2<-train_df$Survived>=round(predict.glm(model,train_df,type = 'response'))
a3<-gender_sub_df$Survived==round(predict.glm(model,test_df,type = 'response'))
a4<-gender_sub_df$Survived>=round(predict.glm(model,test_df,type = 'response'))
v1<-c(v1,length(a1)-sum(a1))
v2<-c(v2,length(a2)-sum(a2))
v3<-c(v3,length(a3)-sum(a3))
v4<-c(v4,length(a4)-sum(a4))
len<-c(len,length(variables[[i]]))
}
#creat dataframe with combination_Nr., Mistakes and bad mistaks in Traings and testdata, aswell as the number of variables
df<-data.frame(No=2:2048,v1,v2,v3,v4,len)
#min. mistakes in Testdata have only one explantory variable--- Sex
variables[[1+which.min(v3)]]
#Auswahlkritium checken
df %>%
filter(v3!=0) %>%                  #overfitting vermeiden
filter(v1+v2<=min(v1+v2)) %>%      #beste Anpassung der trainingsdaten
filter(v2+v4==min(v2+v4)) %>%      #minimale schlimme Fehler
view()
#get the selected Combination of variables
df %>%
filter(v3!=0) %>%
filter(v1+v2==min(v1+v2)) %>%
filter(v2+v4==min(v2+v4)) %>%
filter(len>4)->SELECT
i<-SELECT$No
variables[[i]]
#creat Model and summarise
LogREG<-glm(paste("Survived~",paste(variables[[i]], collapse="+")), data=train_df, family = binomial(link = "logit"))
SUMLOGREG<-summary(LogREG)
SUMLOGREG
#put result back into data and analyse the special cases
train_result<-predict.glm(LogREG,train_df,type = 'response')
train_df$result<-round(train_result,0)
train_df$result_in_class<-as.factor(round(train_result+0.05,1))
train_df$mistake[train_df$Survived==train_df$result]<-0
train_df$mistake[train_df$Survived>train_df$result]<-1
train_df$mistake[train_df$Survived<train_df$result]<-2
train_df$mistake<-as.factor(train_df$mistake)
test_result<-predict.glm(LogREG,test_df,type = 'response')
test_df$result<-round(test_result,0)
test_df$result_in_class<-as.factor(round(test_result+0.05,1))
test_df$mistake[gender_sub_df$Survived==test_df$result]<-0
test_df$mistake[gender_sub_df$Survived>test_df$result]<-1
test_df$mistake[gender_sub_df$Survived<test_df$result]<-2
test_df$mistake<-as.factor(test_df$mistake)
#creat mistake dataframe
result_classed<-c()
Total_numbers_in_train<-c()
Total_numbers_in_test<-c()
mistake_rate_in_train<-c()
mistake_rate_in_test<-c()
mistake_rate_in_total<-c()
for (i in 1:10){
result_classed<-c(result_classed,i/10)
Total_numbers_in_train<-c(Total_numbers_in_train,length(train_df$result_in_class[train_df$result_in_class==i/10]))
Total_numbers_in_test<-c(Total_numbers_in_test,length(test_df$result_in_class[test_df$result_in_class==i/10]))
mtrain<-length(train_df$mistake[train_df$mistake!=0 & train_df$result_in_class==i/10])
mtest<-length(test_df$mistake[test_df$mistake!=0 & test_df$result_in_class==i/10])
mistake_rate_in_train<-c(mistake_rate_in_train,mtrain/Total_numbers_in_train[i])
mistake_rate_in_test<-c(mistake_rate_in_test,mtest/Total_numbers_in_test[i])
mistake_rate_in_total<-c(mistake_rate_in_total,(mtrain+mtest)/(Total_numbers_in_train[i]+Total_numbers_in_test[i]))
}
(Mistake_df<-data.frame(result_classed,
Total_numbers_in_train,
Total_numbers_in_test,
mistake_rate_in_train,
mistake_rate_in_test,
mistake_rate_in_total))
#view(Mistake_df)
######
#risikoklasse 0.6 bis 0.8 in trainingsdaten analysieren
train_df %>%
filter(result_in_class %in% c(0.6,0.7,0.8)) %>%
filter(mistake==2) %>%
summary()
train_df %>%
filter(Sex=="female" & Pclass==3) %>%
summary()
46/144
train_df %>%
filter(Sex=="female" & Pclass==3) %>%
filter(mistake!=0) %>%
summary()
10/43
train_df %>%
filter(result_in_class %in% c(0.6,0.7,0.8)) %>%
filter(Sex!="female" | Pclass!=3) %>%
summary()
train_df %>%
filter(result_in_class %in% c(0.6,0.7,0.8)) %>%
filter(Sex=="female" & Pclass==3) %>%
summary()
46/109
train_df %>% filter(Pclass==3 & Sex=="female")->new_train_df
test_df %>% filter(Pclass==3 & Sex=="female")->new_test_df
new_test_df$Survived <- gender_sub_df$Survived[test_df$Pclass==3 & test_df$Sex=="female"]
new_variables <- powerSet(c("Fare", "Fare_classed","Age", "Age_classed", "Embarked", "SibSp", "FamMem","Ticket", "Title"))
v1<-c()
v2<-c()
v3<-c()
v4<-c()
for (i in 2:512){
model<-glm(paste("Survived~",paste(new_variables[[i]], collapse="+")), data=new_train_df, family = binomial(link = "logit"))
a1<-new_train_df$Survived==round(predict.glm(model,new_train_df,type = 'response'))
a2<-new_train_df$Survived>=round(predict.glm(model,new_train_df,type = 'response'))
a3<-new_test_df$Survived==round(predict.glm(model,new_test_df,type = 'response'))
a4<-new_test_df$Survived>=round(predict.glm(model,new_test_df,type = 'response'))
v1<-c(v1,length(a1)-sum(a1))
v2<-c(v2,length(a2)-sum(a2))
v3<-c(v3,length(a3)-sum(a3))
v4<-c(v4,length(a4)-sum(a4))
len<-c(len,length(variables[[i]]))
}
min(v1)
min(v2)
min(v3)
min(v4)
min(v1+v3)
min(v2+v4)
train_df %>% filter(Sex!="female" | Pclass!=3) %>% filter (mistake==2) %>% nrow()
test_df %>% filter(Sex!="female" | Pclass!=3) %>% filter (mistake==2) %>% nrow()
q()
